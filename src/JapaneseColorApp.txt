import React, { useState } from 'react';
import './JapaneseColorApp.css';
import AddColorForm from './components/AddColorForm';
import AddPaletteForm from './components/AddPaletteForm';
import DownloadButton from './components/DownloadButton';

const cmykToRgb = (c, m, y, k) => {
  c /= 100; m /= 100; y /= 100; k /= 100;
  const r = 255 * (1 - c) * (1 - k);
  const g = 255 * (1 - m) * (1 - k);
  const b = 255 * (1 - y) * (1 - k);
  return [Math.round(r), Math.round(g), Math.round(b)];
};

const ColorSwatch = React.memo(({ cmyk }) => {
  const [c, m, y, k] = cmyk;
  const [r, g, b] = cmykToRgb(c, m, y, k);
  return (
    <div 
      className="color-swatch" 
      style={{ backgroundColor: `rgb(${r},${g},${b})` }}
    />
  );
});

const CopyButton = React.memo(({ text }) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  return (
    <button onClick={handleCopy} className="copy-button">
      {copied ? 'âœ“' : 'ðŸ“‹'}
    </button>
  );
});

const ColorLookup = ({ colorData, paletteData }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);

  const handleSearch = () => {
    const results = Object.entries(colorData)
      .filter(([colorName]) => colorName.toLowerCase().includes(searchTerm.toLowerCase()))
      .map(([colorName, info]) => ({
        name: colorName,
        ...info,
        palettes: info.references.map(ref => {
          const palette = paletteData[ref];
          return palette ? `${ref} (${palette.section})` : ref;
        })
      }));
    setSearchResults(results);
  };

  return (
    <div className="card">
      <h2>Color Lookup</h2>
      <div className="search-container">
        <input
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Enter color name"
        />
        <button onClick={handleSearch}>Search</button>
      </div>
      {searchResults.length === 0 && searchTerm && (
        <div className="alert">
          <h3>No Results</h3>
          <p>No colors found matching your search.</p>
        </div>
      )}
      {searchResults.map((colorInfo, index) => (
        <div key={index} className="result-item">
          <h3>{colorInfo.name}</h3>
          <div className="flex-container">
            <p>CMYK: {colorInfo.CMYK.join(', ')}</p>
            <CopyButton text={colorInfo.CMYK.join(', ')} />
          </div>
          <ColorSwatch cmyk={colorInfo.CMYK} />
          <p>Palettes: {colorInfo.palettes.join(', ')}</p>
        </div>
      ))}
    </div>
  );
};

const PaletteLookup = ({ paletteData, colorData }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);

  const handleSearch = () => {
    const results = Object.entries(paletteData)
      .filter(([id, palette]) => 
        id.toString().includes(searchTerm) || 
        palette.section.toLowerCase().includes(searchTerm.toLowerCase())
      )
      .map(([id, palette]) => ({
        id,
        ...palette,
        colors: palette.colors.map(colorName => {
          const colorInfo = Object.entries(colorData).find(([key]) => key.toLowerCase() === colorName.toLowerCase());
          return colorInfo ? { name: colorInfo[0], ...colorInfo[1] } : { name: colorName, error: 'Color not found' };
        })
      }));
    setSearchResults(results);
  };

  return (
    <div className="card">
      <h2>Palette Lookup</h2>
      <div className="search-container">
        <input
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Enter palette ID or section"
        />
        <button onClick={handleSearch}>Search</button>
      </div>
      {searchResults.length === 0 && searchTerm && (
        <div className="alert">
          <h3>No Results</h3>
          <p>No palettes found matching your search.</p>
        </div>
      )}
      {searchResults.map((paletteInfo, paletteIndex) => (
        <div key={paletteIndex} className="result-item">
          <h3>Palette {paletteInfo.id}: {paletteInfo.section}</h3>
          {paletteInfo.colors.map((colorInfo, colorIndex) => (
            <div key={colorIndex} className="color-info">
              <h4>{colorInfo.name}</h4>
              {colorInfo.error ? (
                <p className="error">{colorInfo.error}</p>
              ) : (
                <>
                  <div className="flex-container">
                    <p>CMYK: {colorInfo.CMYK.join(', ')}</p>
                    <CopyButton text={colorInfo.CMYK.join(', ')} />
                  </div>
                  <ColorSwatch cmyk={colorInfo.CMYK} />
                </>
              )}
            </div>
          ))}
        </div>
      ))}
    </div>
  );
};

const FileUpload = ({ onDataLoaded }) => {
  const [error, setError] = useState('');

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    setError('');
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const jsonData = JSON.parse(e.target.result);
          if (!jsonData || typeof jsonData !== 'object' || !jsonData.colors || !jsonData.palettes) {
            throw new Error('Invalid JSON structure. The file must contain "colors" and "palettes" objects.');
          }
          onDataLoaded(jsonData);
        } catch (error) {
          console.error('Error parsing JSON:', error);
          setError(`Error parsing JSON file: ${error.message}`);
        }
      };
      reader.readAsText(file);
    }
  };

  return (
    <div className="file-upload">
      <label htmlFor="file-upload" className="file-upload-label">
        <div className="file-upload-area">
          <div>
            <span className="upload-icon">ðŸ“¤</span>
            <p>Upload JSON file</p>
          </div>
        </div>
        <input
          id="file-upload"
          name="file-upload"
          type="file"
          className="hidden-input"
          accept=".json"
          onChange={handleFileUpload}
        />
      </label>
      {error && (
        <div className="alert error">
          <h3>Error</h3>
          <p>{error}</p>
        </div>
      )}
    </div>
  );
};

const JapaneseColorApp = () => {
  const [data, setData] = useState(null);

  const handleDataLoaded = (loadedData) => {
    setData(loadedData);
  };

  const handleAddColor = (newColor) => {
    setData(prevData => ({
      ...prevData,
      colors: {
        ...prevData.colors,
        [newColor.name]: {
          CMYK: newColor.CMYK,
          references: []
        }
      }
    }));
  };

  const handleAddPalette = (newPalette) => {
    setData(prevData => {
      const newPaletteId = Object.keys(prevData.palettes).length + 1;
      const updatedColors = { ...prevData.colors };
      const updatedPalettes = { ...prevData.palettes };

      newPalette.colors.forEach(colorName => {
        if (updatedColors[colorName]) {
          updatedColors[colorName] = {
            ...updatedColors[colorName],
            references: [...updatedColors[colorName].references, newPaletteId.toString()]
          };
        }
      });

      updatedPalettes[newPaletteId] = {
        section: newPalette.section,
        colors: newPalette.colors
      };

      return {
        ...prevData,
        colors: updatedColors,
        palettes: updatedPalettes
      };
    });
  };

  return (
    <div className="app-container">
      <h1>Japanese Color Combinations</h1>
      <FileUpload onDataLoaded={handleDataLoaded} />
      {data ? (
        <>
          <ColorLookup colorData={data.colors} paletteData={data.palettes} />
          <PaletteLookup paletteData={data.palettes} colorData={data.colors} />
          <AddColorForm onAddColor={handleAddColor} />
          <AddPaletteForm onAddPalette={handleAddPalette} colors={data.colors} />
          <DownloadButton data={data} />
        </>
      ) : (
        <p className="placeholder-text">Please upload a JSON file to start</p>
      )}
    </div>
  );
};

export default JapaneseColorApp;